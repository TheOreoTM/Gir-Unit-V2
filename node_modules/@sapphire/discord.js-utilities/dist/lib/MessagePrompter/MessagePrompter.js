"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagePrompter = void 0;
const MessagePrompterBaseStrategy_1 = require("./strategies/MessagePrompterBaseStrategy");
const MessagePrompterConfirmStrategy_1 = require("./strategies/MessagePrompterConfirmStrategy");
const MessagePrompterMessageStrategy_1 = require("./strategies/MessagePrompterMessageStrategy");
const MessagePrompterNumberStrategy_1 = require("./strategies/MessagePrompterNumberStrategy");
const MessagePrompterReactionStrategy_1 = require("./strategies/MessagePrompterReactionStrategy");
/**
 * This is a {@link MessagePrompter}, a utility that sends a message, prompting for user input. The prompt can resolve to any kind of input.
 * There are several specifiable types to prompt for user input, and they are as follows:
 * - Confirm
 *   This will send a simple Yes/No prompt, using reactions.
 * - Number
 *   This will prompt for an integer. By default it will be a number between 0 and 10 (inclusive), however you can also specify your own custom range (inclusive).
 * - Reactions
 *   This can be any kind of reaction emoji that Discord supports, and as many as you want. This type will return that reaction instead of a boolean.
 * - Message
 *   This will prompt the user and require a response in the form of a message. This can be helpful if you require a user to upload an image for example, or give text input.
 *
 * You must either use this class directly or extend it.
 *
 * {@link MessagePrompter} uses reactions to prompt for a yes/no answer and returns it.
 * You can modify the confirm and cancel reaction used for each message, or use the {@link MessagePrompter.defaultPrompts}.
 * {@link MessagePrompter.defaultPrompts} is also static so you can modify these directly.
 *
 * @example
 * ```typescript
 * const { MessagePrompter } = require('@sapphire/discord.js-utilities');
 *
 * const handler = new MessagePrompter('Are you sure you want to continue?');
 * const result = await handler.run(channel, author);
 * ```
 *
 * @example
 * ```typescript
 * const { MessagePrompter } = require('@sapphire/discord.js-utilities');
 *
 * const handler = new MessagePrompter('Choose a number between 5 and 10?', 'number', {
 * 		start: 5,
 * 		end: 10
 * });
 * const result = await handler.run(channel, author);
 * ```
 *
 * @example
 * ```typescript
 * const { MessagePrompter } = require('@sapphire/discord.js-utilities');
 *
 * const handler = new MessagePrompter('Are you happy or sad?', 'reaction', {
 * 		reactions: ['üôÇ', 'üôÅ']
 * });
 * const result = await handler.run(channel, author);
 * ```
 *
 * @example
 * ```typescript
 * const { MessagePrompter } = require('@sapphire/discord.js-utilities');
 *
 * const handler = new MessagePrompter('Do you love me?', 'message');
 * const result = await handler.run(channel, author);
 * ```
 */
class MessagePrompter {
    /**
     * Constructor for the {@link MessagePrompter} class
     * @param message The message to send.
     * @param strategy The strategy name or Instance to use
     * @param strategyOptions The options that are passed to the strategy
     */
    constructor(message, strategy, strategyOptions) {
        /**
         * The strategy used in {@link MessagePrompter.run}
         */
        Object.defineProperty(this, "strategy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        let strategyToRun;
        if (message instanceof MessagePrompterBaseStrategy_1.MessagePrompterBaseStrategy) {
            strategyToRun = message;
        }
        else {
            const mapStrategy = MessagePrompter.strategies.get(strategy ?? MessagePrompter.defaultStrategy);
            if (!mapStrategy) {
                throw new Error('No strategy provided');
            }
            strategyToRun = new mapStrategy(message, strategyOptions);
        }
        this.strategy = strategyToRun;
    }
    /**
     * This executes the {@link MessagePrompter} and sends the message.
     * @param channel The channel to use.
     * @param authorOrFilter An author object to validate or a {@linkplain https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.
     */
    run(channel, authorOrFilter) {
        return this.strategy.run(channel, authorOrFilter);
    }
}
exports.MessagePrompter = MessagePrompter;
/**
 * The available strategies
 */
Object.defineProperty(MessagePrompter, "strategies", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: new Map([
        ['confirm', MessagePrompterConfirmStrategy_1.MessagePrompterConfirmStrategy],
        ['number', MessagePrompterNumberStrategy_1.MessagePrompterNumberStrategy],
        ['reaction', MessagePrompterReactionStrategy_1.MessagePrompterReactionStrategy],
        ['message', MessagePrompterMessageStrategy_1.MessagePrompterMessageStrategy]
    ])
});
/**
 * The default strategy to use
 */
Object.defineProperty(MessagePrompter, "defaultStrategy", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 'confirm'
});
//# sourceMappingURL=MessagePrompter.js.map