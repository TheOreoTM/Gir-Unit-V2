"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagePrompterConfirmStrategy = void 0;
const MessagePrompterBaseStrategy_1 = require("./MessagePrompterBaseStrategy");
class MessagePrompterConfirmStrategy extends MessagePrompterBaseStrategy_1.MessagePrompterBaseStrategy {
    /**
     * Constructor for the {@link MessagePrompterBaseStrategy} class
     * @param message The message to be sent {@link MessagePrompter}
     * @param options Overrideable options if needed.
     */
    constructor(message, options) {
        super('confirm', message, options);
        /**
         * The confirm emoji used
         */
        Object.defineProperty(this, "confirmEmoji", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The cancel emoji used
         */
        Object.defineProperty(this, "cancelEmoji", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.confirmEmoji = options?.confirmEmoji ?? MessagePrompterConfirmStrategy.confirmEmoji;
        this.cancelEmoji = options?.cancelEmoji ?? MessagePrompterConfirmStrategy.cancelEmoji;
    }
    /**
     * This executes the {@link MessagePrompter} and sends the message if {@link IMessagePrompterOptions.type} equals confirm.
     * The handler will wait for one (1) reaction.
     * @param channel The channel to use.
     * @param authorOrFilter An author object to validate or a {@linkplain https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.
     * @returns A promise that resolves to a boolean denoting the value of the input (`true` for yes, `false` for no).
     */
    async run(channel, authorOrFilter) {
        const response = await this.collectReactions(channel, authorOrFilter, [this.confirmEmoji, this.cancelEmoji]);
        const confirmed = (response?.emoji?.id ?? response?.emoji?.name) === this.confirmEmoji;
        // prettier-ignore
        return this.explicitReturn ? { ...response, confirmed } : confirmed;
    }
}
exports.MessagePrompterConfirmStrategy = MessagePrompterConfirmStrategy;
/**
 * The default confirm emoji used for {@link MessagePrompterConfirmStrategy}
 */
Object.defineProperty(MessagePrompterConfirmStrategy, "confirmEmoji", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 'ðŸ‡¾'
});
/**
 * The default cancel emoji used for {@link MessagePrompterConfirmStrategy}
 */
Object.defineProperty(MessagePrompterConfirmStrategy, "cancelEmoji", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 'ðŸ‡³'
});
//# sourceMappingURL=MessagePrompterConfirmStrategy.js.map