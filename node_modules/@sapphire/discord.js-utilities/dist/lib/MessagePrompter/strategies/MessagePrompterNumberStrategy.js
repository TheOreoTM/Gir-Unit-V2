"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagePrompterNumberStrategy = void 0;
const MessagePrompterBaseStrategy_1 = require("./MessagePrompterBaseStrategy");
class MessagePrompterNumberStrategy extends MessagePrompterBaseStrategy_1.MessagePrompterBaseStrategy {
    /**
     * Constructor for the {@link MessagePrompterBaseStrategy} class
     * @param messagePrompter The used instance of {@link MessagePrompter}
     * @param options Overrideable options if needed.
     */
    constructor(message, options) {
        super('number', message, options);
        /**
         * The available number emojis
         */
        Object.defineProperty(this, "numberEmojis", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The available number emojis
         */
        Object.defineProperty(this, "start", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The available number emojis
         */
        Object.defineProperty(this, "end", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.numberEmojis = options?.numberEmojis ?? MessagePrompterNumberStrategy.numberEmojis;
        this.start = options?.start ?? 0;
        this.end = options?.end ?? 10;
    }
    /**
     * This executes the {@link MessagePrompter} and sends the message if {@link IMessagePrompterOptions.type} equals number.
     * The handler will wait for one (1) reaction.
     * @param channel The channel to use.
     * @param authorOrFilter An author object to validate or a {@linkplain https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.
     * @returns A promise that resolves to the selected number within the range.
     */
    async run(channel, authorOrFilter) {
        // 0 and 10 are the maximum available emojis as a number
        if (this.start < 0)
            throw new TypeError('Starting number cannot be less than 0.');
        if (this.end > 10)
            throw new TypeError('Ending number cannot be more than 10.');
        const numbers = Array.from({ length: this.end - this.start + 1 }, (_, n) => n + this.start);
        const emojis = this.numberEmojis.slice(this.start, this.end);
        const response = await this.collectReactions(channel, authorOrFilter, emojis);
        const emojiIndex = emojis.findIndex((emoji) => (response?.emoji?.id ?? response?.emoji?.name) === emoji);
        const number = numbers[emojiIndex];
        // prettier-ignore
        return this.explicitReturn ? { ...response, number } : number;
    }
}
exports.MessagePrompterNumberStrategy = MessagePrompterNumberStrategy;
/**
 * The default available number emojis
 */
Object.defineProperty(MessagePrompterNumberStrategy, "numberEmojis", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']
});
//# sourceMappingURL=MessagePrompterNumberStrategy.js.map