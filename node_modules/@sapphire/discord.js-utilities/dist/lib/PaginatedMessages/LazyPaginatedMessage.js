"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LazyPaginatedMessage = void 0;
const utilities_1 = require("@sapphire/utilities");
const discord_js_1 = require("discord.js");
const MessageBuilder_1 = require("../builders/MessageBuilder");
const PaginatedMessage_1 = require("./PaginatedMessage");
/**
 * This is a LazyPaginatedMessage. Instead of resolving all pages that are functions on {@link PaginatedMessage.run} will resolve when requested.
 */
class LazyPaginatedMessage extends PaginatedMessage_1.PaginatedMessage {
    /**
     * Only resolves the page corresponding with the handler's current index.
     */
    async resolvePagesOnRun() {
        await this.resolvePage(this.index);
    }
    /**
     * Resolves the page corresponding with the given index. This also resolves the index's before and after the given index.
     * @param index The index to resolve. Defaults to handler's current index.
     */
    async resolvePage(index) {
        const promises = [super.resolvePage(index)];
        if (this.hasPage(index - 1))
            promises.push(super.resolvePage(index - 1));
        if (this.hasPage(index + 1))
            promises.push(super.resolvePage(index + 1));
        const [result] = await Promise.all(promises);
        return result;
    }
    addPageBuilder(builder) {
        return this.addPage(() => ((0, utilities_1.isFunction)(builder) ? builder(new MessageBuilder_1.MessageBuilder()) : builder));
    }
    addPageContent(content) {
        return this.addPage(() => ({ content }));
    }
    addPageEmbed(embed) {
        return this.addPage(() => ({ embeds: typeof embed === 'function' ? [embed(new discord_js_1.EmbedBuilder())] : [embed] }));
    }
    addPageEmbeds(embeds) {
        return this.addPage(() => {
            let processedEmbeds = (0, utilities_1.isFunction)(embeds)
                ? embeds(new discord_js_1.EmbedBuilder(), new discord_js_1.EmbedBuilder(), new discord_js_1.EmbedBuilder(), new discord_js_1.EmbedBuilder(), new discord_js_1.EmbedBuilder(), new discord_js_1.EmbedBuilder(), new discord_js_1.EmbedBuilder(), new discord_js_1.EmbedBuilder(), new discord_js_1.EmbedBuilder(), new discord_js_1.EmbedBuilder())
                : embeds;
            if (processedEmbeds.length > 10) {
                processedEmbeds = processedEmbeds.slice(0, 10);
            }
            return { embeds: processedEmbeds };
        });
    }
}
exports.LazyPaginatedMessage = LazyPaginatedMessage;
//# sourceMappingURL=LazyPaginatedMessage.js.map