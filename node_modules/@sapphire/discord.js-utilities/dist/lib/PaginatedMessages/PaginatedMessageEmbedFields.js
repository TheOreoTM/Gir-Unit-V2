"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaginatedMessageEmbedFields = void 0;
const discord_utilities_1 = require("@sapphire/discord-utilities");
const utilities_1 = require("@sapphire/utilities");
const discord_js_1 = require("discord.js");
const PaginatedMessage_1 = require("./PaginatedMessage");
/**
 * This is a utility of {@link PaginatedMessage}, except it exclusively paginates the fields of an embed.
 * You must either use this class directly or extend it.
 *
 * It differs from PaginatedFieldMessageEmbed as the items here are whole fields, that are added to the embed,
 * whereas PaginatedFieldMessageEmbed concatenates the items in a single field with a given formatter function.
 *
 * @example
 * ```typescript
 * import { PaginatedMessageEmbedFields } from '@sapphire/discord.js-utilities';
 *
 * new PaginatedMessageEmbedFields()
 * 	.setTemplate({ title: 'Test pager embed', color: '#006080' })
 * 	.setItems([
 * 		{ name: 'Sapphire Framework', value: 'discord.js Framework' },
 * 		{ name: 'Sapphire Framework 2', value: 'discord.js Framework 2' },
 * 		{ name: 'Sapphire Framework 3', value: 'discord.js Framework 3' }
 * 	])
 * 	.setItemsPerPage(2)
 * 	.make()
 * 	.run(message);
 * ```
 */
class PaginatedMessageEmbedFields extends PaginatedMessage_1.PaginatedMessage {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "embedTemplate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new discord_js_1.EmbedBuilder()
        });
        Object.defineProperty(this, "totalPages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "items", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "itemsPerPage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 10
        });
    }
    /**
     * Set the items to paginate.
     * @param items The pages to set
     */
    setItems(items) {
        this.items = items;
        return this;
    }
    /**
     * Sets the amount of items that should be shown per page.
     * @param itemsPerPage The number of items
     */
    setItemsPerPage(itemsPerPage) {
        this.itemsPerPage = itemsPerPage;
        return this;
    }
    /**
     * Sets the template to be used to display the embed fields as pages. This template can either be set from a template {@link MessageEmbed} instance or an object with embed options.
     * All fields in the given template will be overwritten when calling {@link PaginatedMessageEmbedFields.make}.
     *
     * @param template MessageEmbed
     *
     * @example
     * ```typescript
     * import { PaginatedMessageEmbedFields } from '@sapphire/discord.js-utilities';
     * import { EmbedBuilder } from 'discord.js';
     *
     * new PaginatedMessageEmbedFields()
     * 	.setTemplate(new EmbedBuilder().setColor('#006080').setTitle('Test pager embed'))
     * 	.setItems([{ name: 'My field', value: 'The field\'s value' }])
     * 	.make()
     * 	.run(message);
     * ```
     *
     * @example
     * ```typescript
     * import { PaginatedMessageEmbedFields } from '@sapphire/discord.js-utilities';
     *
     * new PaginatedMessageEmbedFields()
     * 	.setTemplate({ title: 'Test pager embed', color: '#006080' })
     * 	.setItems([{ name: 'My field', value: 'The field\'s value' }])
     * 	.make()
     * 	.run(message);
     * ```
     */
    setTemplate(template) {
        this.embedTemplate = this.resolveTemplate(template);
        return this;
    }
    /**
     * Build the pages of the given array.
     *
     * You must call the [[PaginatedMessageEmbedFields.make]] and [[PaginatedMessageEmbedFields.run]] methods last, in that order, for the pagination to work.
     *
     * @example
     * ```typescript
     * import { PaginatedMessageEmbedFields } from '@sapphire/discord.js-utilities';
     *
     * new PaginatedMessageEmbedFields()
     * 	.setItems([
     * 		{ name: 'Sapphire Framework', value: 'discord.js Framework' },
     * 		{ name: 'Sapphire Framework 2', value: 'discord.js Framework 2' },
     * 		{ name: 'Sapphire Framework 3', value: 'discord.js Framework 3' }
     * 	])
     * 	.setItemsPerPage(3)
     * 	.make()
     * 	.run(message);
     * ```
     */
    make() {
        if (!this.items.length)
            throw new Error('The items array is empty.');
        if (this.itemsPerPage > discord_utilities_1.EmbedLimits.MaximumFields)
            throw new Error(`Pages cannot contain more than ${discord_utilities_1.EmbedLimits.MaximumFields} fields.`);
        this.totalPages = Math.ceil(this.items.length / this.itemsPerPage);
        this.generatePages();
        return this;
    }
    generatePages() {
        const template = this.embedTemplate instanceof discord_js_1.EmbedBuilder ? this.embedTemplate.toJSON() : this.embedTemplate;
        for (let i = 0; i < this.totalPages; i++) {
            const clonedTemplate = new discord_js_1.EmbedBuilder(template);
            const fieldsClone = this.embedTemplate.data.fields ?? [];
            clonedTemplate.data.fields = [];
            if (!clonedTemplate.data.color)
                clonedTemplate.setColor('Random');
            const data = this.paginateArray(this.items, i, this.itemsPerPage - fieldsClone.length);
            this.addPage({
                embeds: [clonedTemplate.addFields(...data, ...fieldsClone)]
            });
        }
    }
    paginateArray(items, currentPage, perPageItems) {
        const offset = currentPage * perPageItems;
        return items.slice(offset, offset + perPageItems);
    }
    resolveTemplate(template) {
        if (template instanceof discord_js_1.EmbedBuilder) {
            return template;
        }
        if ((0, utilities_1.isFunction)(template)) {
            return template(new discord_js_1.EmbedBuilder());
        }
        return new discord_js_1.EmbedBuilder(template);
    }
}
exports.PaginatedMessageEmbedFields = PaginatedMessageEmbedFields;
//# sourceMappingURL=PaginatedMessageEmbedFields.js.map