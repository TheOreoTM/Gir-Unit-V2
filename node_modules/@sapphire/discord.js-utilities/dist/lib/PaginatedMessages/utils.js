"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.safelyReplyToInteraction = exports.createPartitionedMessageRow = exports.isButtonComponentBuilder = exports.isMessageButtonInteractionData = exports.actionIsButtonOrMenu = void 0;
const utilities_1 = require("@sapphire/utilities");
const discord_js_1 = require("discord.js");
const type_guards_1 = require("../type-guards");
function actionIsButtonOrMenu(action) {
    return action.type === discord_js_1.ComponentType.SelectMenu || action.type === discord_js_1.ComponentType.Button;
}
exports.actionIsButtonOrMenu = actionIsButtonOrMenu;
function isMessageButtonInteractionData(interaction) {
    return interaction.type === discord_js_1.ComponentType.Button;
}
exports.isMessageButtonInteractionData = isMessageButtonInteractionData;
function isButtonComponentBuilder(component) {
    return component.data.type === discord_js_1.ComponentType.Button;
}
exports.isButtonComponentBuilder = isButtonComponentBuilder;
function createPartitionedMessageRow(components) {
    // Partition the components into two groups: buttons and select menus
    const [messageButtons, selectMenus] = (0, utilities_1.partition)(components, isButtonComponentBuilder);
    // Chunk the button components in sets of 5, the maximum of 1 ActionRowBuilder
    const chunkedButtonComponents = (0, utilities_1.chunk)(messageButtons, 5);
    // Map all the button components to ActionRowBuilders
    const messageButtonActionRows = chunkedButtonComponents.map((componentsChunk) => new discord_js_1.ActionRowBuilder() //
        .setComponents(componentsChunk));
    // Map all the select menu components to ActionRowBuilders
    const selectMenuActionRows = selectMenus.map((component) => new discord_js_1.ActionRowBuilder() //
        .setComponents(component));
    return [...messageButtonActionRows, ...selectMenuActionRows].map((actionRow) => actionRow.toJSON());
}
exports.createPartitionedMessageRow = createPartitionedMessageRow;
/**
 * Safely replies to a message or interaction. This is primarily to save duplicated code in the main `PaginatedMessage` class
 * @param parameters The parameters to create a safe reply to interaction parameters
 */
async function safelyReplyToInteraction(parameters) {
    if ((0, type_guards_1.isAnyInteractableInteraction)(parameters.messageOrInteraction)) {
        if (parameters.messageOrInteraction.replied || parameters.messageOrInteraction.deferred) {
            await parameters.messageOrInteraction.editReply(parameters.interactionEditReplyContent);
        }
        else if (parameters.messageOrInteraction.isMessageComponent()) {
            await parameters.messageOrInteraction.update(parameters.componentUpdateContent);
        }
        else {
            await parameters.messageOrInteraction.reply(parameters.interactionReplyContent);
        }
    }
    else if (parameters.messageMethodContent && parameters.messageMethod && (0, type_guards_1.isMessageInstance)(parameters.messageOrInteraction)) {
        await parameters.messageOrInteraction[parameters.messageMethod](parameters.messageMethodContent);
    }
}
exports.safelyReplyToInteraction = safelyReplyToInteraction;
//# sourceMappingURL=utils.js.map