"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageBuilder = void 0;
/**
 * A message builder class, it implements the {@link MessageCreateOptions} interface.
 */
class MessageBuilder {
    constructor(options) {
        /**
         * Whether or not the message should be spoken aloud.
         * @default false
         */
        Object.defineProperty(this, "tts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The nonce for the message.
         * @default ''
         */
        Object.defineProperty(this, "nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The content for the message. If set to undefined and the builder is used to edit, the content will not be
         * replaced.
         */
        Object.defineProperty(this, "content", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The embeds for the message. If set to undefined and the builder is used to edit, the embed will not be replaced.
         * @remark There is a maximum of 10 embeds in 1 message
         */
        Object.defineProperty(this, "embeds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Which mentions should be parsed from the message content.
         */
        Object.defineProperty(this, "allowedMentions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Files to send with the message. This should not be set when editing a message, as Discord does not support
         * editing file attachments.
         */
        Object.defineProperty(this, "files", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.tts = options?.tts ?? MessageBuilder.defaults.tts;
        this.nonce = options?.nonce ?? MessageBuilder.defaults.nonce;
        this.content = options?.content ?? MessageBuilder.defaults.content;
        this.embeds = options?.embeds ?? MessageBuilder.defaults.embeds;
        this.allowedMentions = options?.allowedMentions ?? MessageBuilder.defaults.allowedMentions;
        this.files = options?.files ?? MessageBuilder.defaults.files;
    }
    /**
     * Sets the value for the {@link MessageBuilder.tts} field.
     * @param tts Whether or not the message should be spoken aloud.
     */
    setTTS(tts) {
        this.tts = tts;
        return this;
    }
    /**
     * Sets the value for the {@link MessageBuilder.nonce} field.
     * @param nonce The nonce for the message.
     */
    setNonce(nonce) {
        this.nonce = nonce;
        return this;
    }
    /**
     * Sets the value for the {@link MessageBuilder.content} field.
     * @param content The content for the message. If set to undefined and the builder is used to edit, the content will
     * not be replaced.
     */
    setContent(content) {
        this.content = content;
        return this;
    }
    /**
     * Sets the value for the {@link MessageBuilder.embed} field.
     * @param embeds The embeds for the message. If set to undefined and the builder is used to edit, the embed will not be
     * replaced. There is a maximum of 10 embeds per message
     * @remark When providing more than 10 embeds, the array will automatically be sliced down to the first 10.
     */
    setEmbeds(embeds) {
        // Ensure no more than 10 embeds are ever set
        if (embeds && embeds.length > 10) {
            embeds = embeds.slice(0, 10);
        }
        this.embeds = embeds;
        return this;
    }
    /**
     * Sets the value for the {@link MessageBuilder.allowedMentions} field.
     * @param allowedMentions Which mentions should be parsed from the message content.
     */
    setAllowedMentions(allowedMentions) {
        this.allowedMentions = allowedMentions;
        return this;
    }
    /**
     * Adds a new value for the {@link MessageBuilder.files} field array.
     * @param file The file to add to the {@link MessageBuilder.files} field array.
     */
    addFile(file) {
        this.files = this.files?.concat(file) ?? [file];
        return this;
    }
    /**
     * Sets a single value for the {@link MessageBuilder.files} field array.
     * @param file The file to send with the message. This should not be set when editing a message, as Discord does not
     * support editing file attachments.
     */
    setFile(file) {
        this.files = [file];
        return this;
    }
    /**
     * Sets the value for the {@link MessageBuilder.files} field.
     * @param files The files to send with the message. This should not be set when editing a message, as Discord does
     * not support editing file attachments.
     */
    setFiles(files) {
        this.files = files;
        return this;
    }
}
exports.MessageBuilder = MessageBuilder;
/**
 * The default values for all MessageBuilder instances.
 */
Object.defineProperty(MessageBuilder, "defaults", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: {}
});
//# sourceMappingURL=MessageBuilder.js.map