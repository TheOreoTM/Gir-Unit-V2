"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isGuildMember = exports.isAnyInteractableInteraction = exports.isAnyInteraction = exports.isMessageInstance = exports.isNsfwChannel = exports.isVoiceBasedChannel = exports.isTextBasedChannel = exports.isPrivateThreadChannel = exports.isPublicThreadChannel = exports.isNewsThreadChannel = exports.isThreadChannel = exports.isStageChannel = exports.isVoiceChannel = exports.isTextChannel = exports.isNewsChannel = exports.isGuildBasedChannelByGuildKey = exports.isGuildBasedChannel = exports.isGroupChannel = exports.isDMChannel = exports.isCategoryChannel = void 0;
const utilities_1 = require("@sapphire/utilities");
const discord_js_1 = require("discord.js");
/**
 * Checks whether a given channel is a {@link CategoryChannel}
 * @param channel The channel to check
 */
function isCategoryChannel(channel) {
    return channel?.type === discord_js_1.ChannelType.GuildCategory;
}
exports.isCategoryChannel = isCategoryChannel;
/**
 * Checks whether a given channel is a {@link DMChannel}
 * @param channel The channel to check
 */
function isDMChannel(channel) {
    return channel?.type === discord_js_1.ChannelType.DM;
}
exports.isDMChannel = isDMChannel;
/**
 * Checks whether a given channel is a {@link PartialGroupDMChannel}
 * @param channel The channel to check
 */
function isGroupChannel(channel) {
    return channel?.type === discord_js_1.ChannelType.GroupDM;
}
exports.isGroupChannel = isGroupChannel;
/**
 * Checks if a channel comes from a guild.
 * @param channel The channel to check
 * @returns Whether or not the channel is guild-based.
 */
function isGuildBasedChannel(channel) {
    return channel?.type !== discord_js_1.ChannelType.DM;
}
exports.isGuildBasedChannel = isGuildBasedChannel;
/**
 * Checks whether or not a channel comes from a guild.
 * @remark As opposed to {@link isGuildBasedChannel} this checks if there is `guild` property on the channel.
 * @param channel The channel to check.
 * @returns Whether or not the channel is guild-based.
 */
function isGuildBasedChannelByGuildKey(channel) {
    return Reflect.has(channel ?? {}, 'guild');
}
exports.isGuildBasedChannelByGuildKey = isGuildBasedChannelByGuildKey;
/**
 * Checks whether a given channel is a {@link NewsChannel}.
 * @param channel The channel to check.
 */
function isNewsChannel(channel) {
    return channel?.type === discord_js_1.ChannelType.GuildNews;
}
exports.isNewsChannel = isNewsChannel;
/**
 * Checks whether a given channel is a {@link TextChannel}.
 * @param channel The channel to check.
 */
function isTextChannel(channel) {
    return channel?.type === discord_js_1.ChannelType.GuildText;
}
exports.isTextChannel = isTextChannel;
/**
 * Checks whether a given channel is a {@link VoiceChannel}
 * @param channel The channel to check
 */
function isVoiceChannel(channel) {
    return channel?.type === discord_js_1.ChannelType.GuildVoice;
}
exports.isVoiceChannel = isVoiceChannel;
/**
 * Checks whether a given channel is a {@link StageChannel}
 * @param channel The channel to check
 */
function isStageChannel(channel) {
    return channel?.type === discord_js_1.ChannelType.GuildStageVoice;
}
exports.isStageChannel = isStageChannel;
/**
 * Checks whether a given channel is a {@link ThreadChannel}
 * @param channel The channel to check.
 */
function isThreadChannel(channel) {
    return channel?.isThread() ?? false;
}
exports.isThreadChannel = isThreadChannel;
/**
 * Checks whether a given channel is a News {@link ThreadChannel}
 * @param channel The channel to check.
 */
function isNewsThreadChannel(channel) {
    return channel?.type === discord_js_1.ChannelType.GuildNewsThread;
}
exports.isNewsThreadChannel = isNewsThreadChannel;
/**
 * Checks whether a given channel is a Public {@link ThreadChannel}
 * @param channel The channel to check.
 */
function isPublicThreadChannel(channel) {
    return channel?.type === discord_js_1.ChannelType.GuildPublicThread;
}
exports.isPublicThreadChannel = isPublicThreadChannel;
/**
 * Checks whether a given channel is a Private {@link ThreadChannel}
 * @param channel The channel to check.
 */
function isPrivateThreadChannel(channel) {
    return channel?.type === discord_js_1.ChannelType.GuildPrivateThread;
}
exports.isPrivateThreadChannel = isPrivateThreadChannel;
/**
 * Checks whether a given channel is a {@link TextBasedChannelTypes}. This means it has a `send` method.
 * @param channel The channel to check.
 */
function isTextBasedChannel(channel) {
    if ((0, utilities_1.isNullish)(channel) || isStageChannel(channel))
        return false;
    return !(0, utilities_1.isNullish)(channel.send);
}
exports.isTextBasedChannel = isTextBasedChannel;
/**
 * Checks whether a given channel is a {@link VoiceBasedChannel}.
 * @param channel: The channel to check.
 */
function isVoiceBasedChannel(channel) {
    if ((0, utilities_1.isNullish)(channel))
        return false;
    return channel.isVoiceBased();
}
exports.isVoiceBasedChannel = isVoiceBasedChannel;
/**
 * Checks whether a given channel allows NSFW content or not
 * @param channel The channel to check.
 */
function isNsfwChannel(channel) {
    if ((0, utilities_1.isNullish)(channel))
        return false;
    switch (channel.type) {
        case discord_js_1.ChannelType.DM:
        case discord_js_1.ChannelType.GroupDM:
        case discord_js_1.ChannelType.GuildCategory:
        case discord_js_1.ChannelType.GuildStageVoice:
        case discord_js_1.ChannelType.GuildVoice:
        case discord_js_1.ChannelType.GuildDirectory:
            return false;
        case discord_js_1.ChannelType.GuildNews:
        case discord_js_1.ChannelType.GuildText:
        case discord_js_1.ChannelType.GuildForum:
            return channel.nsfw;
        case discord_js_1.ChannelType.GuildNewsThread:
        case discord_js_1.ChannelType.GuildPrivateThread:
        case discord_js_1.ChannelType.GuildPublicThread:
            return Boolean(channel.parent?.nsfw);
    }
}
exports.isNsfwChannel = isNsfwChannel;
/**
 * Checks whether a given message is an instance of {@link Message}, and not {@link APIMessage}
 * @param message The message to check
 * @returns `true` if the message is an instance of `Message`, false otherwise.
 */
function isMessageInstance(message) {
    return message instanceof discord_js_1.Message;
}
exports.isMessageInstance = isMessageInstance;
/**
 * Checks whether the input `messageOrInteraction` is one of {@link Message} or one of {@link Interaction}, {@link CommandInteraction}, {@link ContextMenuInteraction}, or {@link SelectMenuInteraction}
 * @param messageOrInteraction The message or interaction that should be checked.
 * @returns `true` if the `messageOrInteraction` is **NOT** an instanceof {@link Message}, `false` if it is.
 */
function isAnyInteraction(messageOrInteraction) {
    return messageOrInteraction instanceof discord_js_1.BaseInteraction;
}
exports.isAnyInteraction = isAnyInteraction;
function isAnyInteractableInteraction(messageOrInteraction) {
    if (isAnyInteraction(messageOrInteraction)) {
        return !messageOrInteraction.isAutocomplete();
    }
    return false;
}
exports.isAnyInteractableInteraction = isAnyInteractableInteraction;
/**
 * Checks whether a given member is an instance of {@link GuildMember}, and not {@link APIInteractionGuildMember}, {@link APIGuildMember}, or {@link Nullish}
 * @param member The member to check
 * @returns `true` if the member is an instance of `GuildMember`, false otherwise.
 */
function isGuildMember(member) {
    return member instanceof discord_js_1.GuildMember;
}
exports.isGuildMember = isGuildMember;
//# sourceMappingURL=type-guards.js.map