{"version":3,"sources":["../../src/arguments/CoreEnum.ts"],"names":[],"mappings":";;;;AACA,SAAS,mBAAmB;AAC5B,SAAS,gBAAgB;AAGlB,IAAM,eAAN,cAA2B,SAAiB;AAAA,EAC3C,YAAY,SAAuB;AACzC,UAAM,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,EAChC;AAAA,EAEO,IAAI,WAAmB,SAAuD;AACpF,UAAM,WAAW,YAAY,WAAW,EAAE,MAAM,QAAQ,MAAM,iBAAiB,QAAQ,gBAAgB,CAAC;AACxG,WAAO,SAAS;AAAA,MAAW,CAAC,eAC3B,KAAK,MAAM;AAAA,QACV;AAAA,QACA;AAAA,QACA,SAAS,uDAAuD,QAAQ,MAAM,KAAK,IAAI;AAAA,QACvF;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;AAhBa","sourcesContent":["import type { PieceContext } from '@sapphire/pieces';\nimport { resolveEnum } from '../lib/resolvers/enum';\nimport { Argument } from '../lib/structures/Argument';\nimport type { EnumArgumentContext } from '../lib/types/ArgumentContexts';\n\nexport class CoreArgument extends Argument<string> {\n\tpublic constructor(context: PieceContext) {\n\t\tsuper(context, { name: 'enum' });\n\t}\n\n\tpublic run(parameter: string, context: EnumArgumentContext): Argument.Result<string> {\n\t\tconst resolved = resolveEnum(parameter, { enum: context.enum, caseInsensitive: context.caseInsensitive });\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: `The argument must have one of the following values: ${context.enum?.join(', ')}`,\n\t\t\t\tcontext\n\t\t\t})\n\t\t);\n\t}\n}\n"]}