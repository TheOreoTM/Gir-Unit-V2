'use strict';

var discord_js = require('discord.js');
var Identifiers_js = require('../lib/errors/Identifiers.js');
var Precondition_js = require('../lib/structures/Precondition.js');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var CorePrecondition = class extends Precondition_js.AllFlowsPrecondition {
  constructor() {
    super(...arguments);
    this.allowedTypes = [discord_js.ChannelType.GuildText, discord_js.ChannelType.GuildPublicThread, discord_js.ChannelType.GuildPrivateThread];
  }
  messageRun(message) {
    return this.allowedTypes.includes(message.channel.type) ? this.ok() : this.error({
      identifier: Identifiers_js.Identifiers.PreconditionGuildTextOnly,
      message: "You can only run this message command in server text channels."
    });
  }
  async chatInputRun(interaction) {
    const channel = await this.fetchChannelFromInteraction(interaction);
    return this.allowedTypes.includes(channel.type) ? this.ok() : this.error({
      identifier: Identifiers_js.Identifiers.PreconditionGuildTextOnly,
      message: "You can only run this chat input command in server text channels."
    });
  }
  async contextMenuRun(interaction) {
    const channel = await this.fetchChannelFromInteraction(interaction);
    return this.allowedTypes.includes(channel.type) ? this.ok() : this.error({
      identifier: Identifiers_js.Identifiers.PreconditionGuildTextOnly,
      message: "You can only run this context menu command in server text channels."
    });
  }
};
__name(CorePrecondition, "CorePrecondition");

exports.CorePrecondition = CorePrecondition;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=GuildTextOnly.js.map